Instâncias a serem usadas para teste:
1, 2, 4, 8, 16, 32, 64, 128, 256 bits

Frascos:
1, bits/2(se não der um teste por altura), suficiente para teste binário.

Códigos a testar:
* Teste de O(raiz de n)
* Teste de 3.2Melhorado
* Teste de 3.3 

Para a medida de tempo de CPU das execu¸c~oes utilize as fun¸c~oes dispon´ıveis no
link correspondente na p´agina do curso, um exemplo de utiliza¸c~ao ´e apresentado.
Quando o tempo de CPU for inferior `a 5 segundos, fa¸ca uma repeti¸c~ao da execu¸c~ao
tantas vezes quantas forem
necess´arias para que o tempo ultrapasse 5 s (fa¸ca um while), conte quantas
foram as execu¸c~oes e reporte a m´edia.

• Obrigatoriamente apresente tabelas contendo tr^es de colunas para cada algoritmo
 aplicado `as inst^ancias, uma com o valor da complexidade te´orica, uma com o tempo
 de CPU utilizado e uma com a raz~ao destes dois valores. Cada linha da tabela ´e
 associada a uma inst^ancia e cont´em a identifica¸c~ao da mesma. Nesta tabela
 coloque as inst^ancias em ordem crescente de tamanho.

O grupo deve implementar e testar experimentalmente algoritmos
 (para 1, 2, 4, : : :, 2p , isto ´e, pot^encias de 2, frascos dispon´ıveis e
  para um n´umero ilimitado deles) apresentando estat´ısticas do
tempo de CPU das execu¸c~oes para cada conjunto de valores de x.
 Estes ser~ao correspondentes ao n´umero de bits utilizados para representar
 o valor m´aximo do conjunto (n ´e este valor m´aximo).
Haver´a conjuntos de 32, 64, 128, 192 e 256 bits. Estas inst^ancias do problema
  ser~ao disponibilizadas na p´agina web do curso. Estabele¸ca para cada 
  tamanho de inst^ancia o menor valor de k que permite resolver o problema em
   tempo habil.